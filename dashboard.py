import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√£o do Streamlit
st.set_page_config(page_title="Dashboard de Satisfa√ß√£o", layout="wide")

# Criar navega√ß√£o entre p√°ginas
menu = st.sidebar.radio("Navega√ß√£o", ["Vis√£o Geral", "Detalhamento"])

# Dados dos operadores e clientes
operadores_clientes = [
    ("Cintia", "Apas"), ("Cintia", "CMOC (Copebr√°s)"), ("Cintia", "KIMBERLY CLARK"),
    ("Cintia", "MSC"), ("Cintia", "Tetra Pak"), ("Cintia", "Weleda"), ("Cintia", "Zara"),
    ("Cintia", "ZARA INTERMITENTE 06-20"), ("Erick Massuco", "ZARA INTERMITENTE 21-05"),
    ("Erick Massuco", "ZUP"), ("Cintia", "Maersk"), ("Danielle", "SBT"), ("Danielle", "Serasa"),
    ("Danielle", "Mecalor"), ("Erick Massuco", "Mitsubishi"), ("Erick Massuco", "Panalpina (Air&Sea e Solutions)"),
    ("Erick Massuco", "Sompo"), ("Erick Massuco", "ZIM"), ("Erick Massuco", "Amway"), ("G.Paiva", "Banco Fibra"),
    ("G.Paiva", "Danone"), ("G.Paiva", "Edf"), ("Kau√£", "Electrolux"), ("G.Paiva", "Ericsson EDB & EGS"),
    ("G.Paiva", "GlobalPack - [9 Unid]"), ("G.Paiva", "kohler"), ("Kau√£", "Owens"), ("G.Paiva", "RecordTV"),
    ("G.Paiva", "RoadCard"), ("G.Paiva", "Sencinet"), ("Kau√£", "Sephora"), ("G.Paiva", "Sifra"),
    ("G.Paiva", "Vopak"), ("G.Paiva", "Jo√£o Fortes"), ("Kau√£", "Carbon (Unicom)"), ("Jo√£o", "Dafiti"),
    ("Jo√£o", "Pamcary"), ("Jo√£o", "SumUp"), ("Jo√£o", "Torrent"), ("Jo√£o", "Tuvsud"), ("Jo√£o", "Vis√£o Prev"),
    ("Jo√£o", "Capemisa"), ("Kau√£", "Canon (Toshiba)"), ("Luan", "Celistics"), ("Luan", "Cengage"),
    ("Kau√£", "Cirion (Level 3)"), ("Luan", "FMU"), ("Luan", "Lopes"), ("Kau√£", "AIG"),
    ("Luan", "Dr. Oetker"), ("Luan", "Linhas Uni"), ("Kau√£", "Thermo Fisher"), ("Luan", "Zambon"),
    ("Kau√£", "99 Tecnologia"), ("Ruan", "Alper"), ("Ruan", "Ascenty"), ("Ruan", "Cateno"),
    ("Ruan", "DuPont"), ("Ruan", "Informa Markets"), ("Ruan", "JC Hitachi"), ("Ruan", "Promedon"),
    ("Ruan", "Recovery"), ("Ruan", "Jockey Club"), ("Lucas Barros", "ClienteX")
]

# Criar DataFrame
df_operador_cliente = pd.DataFrame(operadores_clientes, columns=["Operador", "Cliente"])

# Gerar dados de avalia√ß√µes e satisfa√ß√£o m√©dia dinamicamente
operadores_unicos = df_operador_cliente["Operador"].unique()
df_respostas = pd.DataFrame({
    "Operador": operadores_unicos,
    "Satisfa√ß√£o M√©dia": [round(0.75 + (i % 3) * 0.1, 2) for i in range(len(operadores_unicos))],
    "Avalia√ß√µes": [5 for _ in range(len(operadores_unicos))]
})

# Calcular m√©tricas gerais
media_geral_satisfacao = df_respostas["Satisfa√ß√£o M√©dia"].mean()
total_avaliacoes_realizadas = df_respostas["Avalia√ß√µes"].sum()
percentual_uso_bpo = (df_operador_cliente["Cliente"].nunique() / len(df_operador_cliente)) * 100

# Criar DataFrame de feedbacks
df_feedback = df_operador_cliente.copy()
df_feedback["Feedback"] = df_feedback["Cliente"].apply(lambda x: "√ìtimo atendimento" if "A" in x else "Pode melhorar")
df_feedback["Tipo Feedback"] = df_feedback["Feedback"].apply(lambda x: "Positivo" if "√ìtimo" in x else "Negativo")

if menu == "Vis√£o Geral":
    st.title("üìä Vis√£o Geral da Equipe")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Total de Clientes", df_operador_cliente["Cliente"].nunique())
    col2.metric("Total de Operadores", df_operador_cliente["Operador"].nunique())
    col3.metric("M√©dia Geral de Satisfa√ß√£o", f"{media_geral_satisfacao:.3f}")
    col4.metric("Total de Avalia√ß√µes", total_avaliacoes_realizadas)
    
    # Gr√°fico de Satisfa√ß√£o por Operador
    st.subheader("üìå Satisfa√ß√£o M√©dia por Operador")
    fig = px.bar(df_respostas, x="Operador", y="Satisfa√ß√£o M√©dia", color_discrete_sequence=["#1f77b4"], title="Satisfa√ß√£o M√©dia por Operador")
    st.plotly_chart(fig, use_container_width=True)
    
    # Gr√°fico de Feedbacks Positivos e Negativos
    st.subheader("üìå Feedbacks Positivos e Negativos por Operador")
    feedback_contagem = df_feedback.groupby(["Operador", "Tipo Feedback"]).size().reset_index(name="Quantidade")
    fig_feedback = px.bar(feedback_contagem, x="Operador", y="Quantidade", color="Tipo Feedback", barmode="group", title="Feedbacks por Operador")
    st.plotly_chart(fig_feedback, use_container_width=True)
    
elif menu == "Detalhamento":
    st.title("üìå Detalhamento por Operador")
    operador_selecionado = st.selectbox("Selecione o Operador", df_operador_cliente["Operador"].unique())
    clientes_filtrados = df_operador_cliente[df_operador_cliente["Operador"] == operador_selecionado]["Cliente"].unique()
    cliente_selecionado = st.selectbox("Selecione o Cliente", clientes_filtrados)
    
    st.subheader(f"üéØ {operador_selecionado}")
    col1, col2 = st.columns([2, 3])
    satisfacao_media = df_respostas.set_index("Operador").get(operador_selecionado, {}).get("Satisfa√ß√£o M√©dia", "N/A")
    avaliacoes = df_respostas.set_index("Operador").get(operador_selecionado, {}).get("Avalia√ß√µes", "N/A")
    col1.metric("Satisfa√ß√£o M√©dia", satisfacao_media)
    col1.metric("Total de Avalia√ß√µes", avaliacoes)
    col1.metric("Total de Clientes Atendidos", len(clientes_filtrados))
    
    feedbacks = df_feedback[(df_feedback["Operador"] == operador_selecionado) & (df_feedback["Cliente"] == cliente_selecionado)]["Feedback"].tolist()
    col2.write("**Resumo dos Feedbacks:**")
    for feedback in feedbacks:
        col2.write(f"- {feedback}")

        import os
import pandas as pd
import streamlit as st

from io import BytesIO

def salvar_csv():
    caminho_pasta = "export_powerbi"
    os.makedirs(caminho_pasta, exist_ok=True)  # Criar a pasta se n√£o existir

    # Criar arquivos CSV na mem√≥ria para download
    arquivos = {
        "üì• Baixar Dados de Satisfa√ß√£o": df_respostas,
        "üì• Baixar Feedbacks": df_feedback,
        "üì• Baixar Operadores e Clientes": df_operador_cliente,
    }

    st.success("üìä Dados exportados com sucesso! Baixe os arquivos abaixo.")

    for nome, df in arquivos.items():
        output = BytesIO()
        df.to_csv(output, index=False, encoding="utf-8")
        output.seek(0)
        
        st.download_button(
            label=nome,
            data=output,
            file_name=f"{nome.split(' ')[1].lower()}.csv",
            mime="text/csv"
        )

# Criar bot√£o para exporta√ß√£o
if st.button("üì§ Exportar Dados para o Power BI"):
    salvar_csv()
